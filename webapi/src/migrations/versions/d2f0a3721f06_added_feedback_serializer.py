"""added Feedback serializer

Revision ID: d2f0a3721f06
Revises: ae96c0d45554
Create Date: 2023-03-04 15:48:40.426372

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d2f0a3721f06"
down_revision = "ae96c0d45554"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "meeting_feedbacks",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("meeting", sa.Integer(), nullable=False),
        sa.Column("user", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("score", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["meeting"], ["meetings.id"], name=op.f("fk_meeting_feedbacks_meeting_meetings")
        ),
        sa.ForeignKeyConstraint(
            ["user"], ["users.id"], name=op.f("fk_meeting_feedbacks_user_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_meeting_feedbacks")),
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "assessment_of_the_meeting",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("meeting_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("text", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("score", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["meeting_id"], ["meetings.id"], name="fk_assessment_of_the_meeting_meeting_id_meetings"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_assessment_of_the_meeting_user_id_users"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_assessment_of_the_meeting"),
    )
    op.create_table(
        "profiles_profile",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("password", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column(
            "last_login", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("is_superuser", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("username", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
        sa.Column("first_name", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
        sa.Column("last_name", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=254), autoincrement=False, nullable=False),
        sa.Column("is_staff", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "date_joined", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column("middle_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column(
            "birthday", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("phone", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("telegram_login", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("age", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.Column("uce_score", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.Column("telegram_id", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("chat_id", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="profiles_profile_pkey"),
        sa.UniqueConstraint("username", name="profiles_profile_username_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "profiles_profile_username_5e4bd024_like", "profiles_profile", ["username"], unique=False
    )
    op.create_table(
        "questioning_testcompleted",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("value", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column("profile_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("test_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles_profile.id"],
            name="questioning_testcomp_profile_id_95d98c17_fk_profiles_",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["content_test.id"],
            name="questioning_testcompleted_test_id_3c120734_fk_content_test_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="questioning_testcompleted_pkey"),
    )
    op.create_index(
        "questioning_testcompleted_test_id_3c120734",
        "questioning_testcompleted",
        ["test_id"],
        unique=False,
    )
    op.create_index(
        "questioning_testcompleted_profile_id_95d98c17",
        "questioning_testcompleted",
        ["profile_id"],
        unique=False,
    )
    op.create_table(
        "schedule_meeting",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "date_start", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("format", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.Column("psychologist_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("comment", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["psychologist_id"],
            ["profiles_profile.id"],
            name="schedule_meeting_psychologist_id_cd6176a5_fk_profiles_",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["profiles_profile.id"],
            name="schedule_meeting_user_id_b56d6ea7_fk_profiles_profile_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="schedule_meeting_pkey"),
    )
    op.create_index(
        "schedule_meeting_user_id_b56d6ea7", "schedule_meeting", ["user_id"], unique=False
    )
    op.create_index(
        "schedule_meeting_psychologist_id_cd6176a5",
        "schedule_meeting",
        ["psychologist_id"],
        unique=False,
    )
    op.create_table(
        "content_test",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("type", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="content_test_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "django_celery_beat_solarschedule",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("event", sa.VARCHAR(length=24), autoincrement=False, nullable=False),
        sa.Column(
            "latitude", sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=False
        ),
        sa.Column(
            "longitude", sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="django_celery_beat_solarschedule_pkey"),
        sa.UniqueConstraint(
            "event",
            "latitude",
            "longitude",
            name="django_celery_beat_solar_event_latitude_longitude_ba64999a_uniq",
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "django_content_type",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("app_label", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("model", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="django_content_type_pkey"),
        sa.UniqueConstraint(
            "app_label", "model", name="django_content_type_app_label_model_76bd3d3b_uniq"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "profiles_profile_user_permissions",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("profile_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("permission_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["auth_permission.id"],
            name="profiles_profile_use_permission_id_9006f0b0_fk_auth_perm",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles_profile.id"],
            name="profiles_profile_use_profile_id_fd4f3b6f_fk_profiles_",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="profiles_profile_user_permissions_pkey"),
        sa.UniqueConstraint(
            "profile_id",
            "permission_id",
            name="profiles_profile_user_pe_profile_id_permission_id_80af95c2_uniq",
        ),
    )
    op.create_index(
        "profiles_profile_user_permissions_profile_id_fd4f3b6f",
        "profiles_profile_user_permissions",
        ["profile_id"],
        unique=False,
    )
    op.create_index(
        "profiles_profile_user_permissions_permission_id_9006f0b0",
        "profiles_profile_user_permissions",
        ["permission_id"],
        unique=False,
    )
    op.create_table(
        "auth_group",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="auth_group_pkey"),
        sa.UniqueConstraint("name", name="auth_group_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("auth_group_name_a6ea08ec_like", "auth_group", ["name"], unique=False)
    op.create_table(
        "django_session",
        sa.Column("session_key", sa.VARCHAR(length=40), autoincrement=False, nullable=False),
        sa.Column("session_data", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "expire_date", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("session_key", name="django_session_pkey"),
    )
    op.create_index(
        "django_session_session_key_c0390e0f_like", "django_session", ["session_key"], unique=False
    )
    op.create_index(
        "django_session_expire_date_a5c62663", "django_session", ["expire_date"], unique=False
    )
    op.create_table(
        "django_celery_beat_periodictasks",
        sa.Column("ident", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.Column(
            "last_update", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("ident", name="django_celery_beat_periodictasks_pkey"),
    )
    op.create_table(
        "auth_permission",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("content_type_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("codename", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["content_type_id"],
            ["django_content_type.id"],
            name="auth_permission_content_type_id_2f476e4b_fk_django_co",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="auth_permission_pkey"),
        sa.UniqueConstraint(
            "content_type_id",
            "codename",
            name="auth_permission_content_type_id_codename_01ab375a_uniq",
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "auth_permission_content_type_id_2f476e4b",
        "auth_permission",
        ["content_type_id"],
        unique=False,
    )
    op.create_table(
        "django_celery_beat_periodictask",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("task", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("args", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("kwargs", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("queue", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("exchange", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("routing_key", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column(
            "expires", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("enabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "last_run_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("total_run_count", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "date_changed", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("crontab_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("interval_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("solar_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("one_off", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "start_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("priority", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("headers", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("clocked_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("expire_seconds", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.CheckConstraint(
            "expire_seconds >= 0", name="django_celery_beat_periodictask_expire_seconds_check"
        ),
        sa.CheckConstraint("priority >= 0", name="django_celery_beat_periodictask_priority_check"),
        sa.CheckConstraint(
            "total_run_count >= 0", name="django_celery_beat_periodictask_total_run_count_check"
        ),
        sa.ForeignKeyConstraint(
            ["clocked_id"],
            ["django_celery_beat_clockedschedule.id"],
            name="django_celery_beat_p_clocked_id_47a69f82_fk_django_ce",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["crontab_id"],
            ["django_celery_beat_crontabschedule.id"],
            name="django_celery_beat_p_crontab_id_d3cba168_fk_django_ce",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["interval_id"],
            ["django_celery_beat_intervalschedule.id"],
            name="django_celery_beat_p_interval_id_a8ca27da_fk_django_ce",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["solar_id"],
            ["django_celery_beat_solarschedule.id"],
            name="django_celery_beat_p_solar_id_a87ce72c_fk_django_ce",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="django_celery_beat_periodictask_pkey"),
        sa.UniqueConstraint("name", name="django_celery_beat_periodictask_name_key"),
    )
    op.create_index(
        "django_celery_beat_periodictask_solar_id_a87ce72c",
        "django_celery_beat_periodictask",
        ["solar_id"],
        unique=False,
    )
    op.create_index(
        "django_celery_beat_periodictask_name_265a36b7_like",
        "django_celery_beat_periodictask",
        ["name"],
        unique=False,
    )
    op.create_index(
        "django_celery_beat_periodictask_interval_id_a8ca27da",
        "django_celery_beat_periodictask",
        ["interval_id"],
        unique=False,
    )
    op.create_index(
        "django_celery_beat_periodictask_crontab_id_d3cba168",
        "django_celery_beat_periodictask",
        ["crontab_id"],
        unique=False,
    )
    op.create_index(
        "django_celery_beat_periodictask_clocked_id_47a69f82",
        "django_celery_beat_periodictask",
        ["clocked_id"],
        unique=False,
    )
    op.create_table(
        "content_question",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("text", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("test_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("order_num", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.CheckConstraint("order_num >= 0", name="content_question_order_num_check"),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["content_test.id"],
            name="content_question_test_id_85d9d075_fk_content_test_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="content_question_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "content_question_test_id_85d9d075", "content_question", ["test_id"], unique=False
    )
    op.create_table(
        "django_celery_beat_crontabschedule",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("minute", sa.VARCHAR(length=240), autoincrement=False, nullable=False),
        sa.Column("hour", sa.VARCHAR(length=96), autoincrement=False, nullable=False),
        sa.Column("day_of_week", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.Column("day_of_month", sa.VARCHAR(length=124), autoincrement=False, nullable=False),
        sa.Column("month_of_year", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.Column("timezone", sa.VARCHAR(length=63), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="django_celery_beat_crontabschedule_pkey"),
    )
    op.create_table(
        "questioning_testprogress",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column("answer_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("profile_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("question_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("test_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["answer_id"],
            ["content_answer.id"],
            name="questioning_testprog_answer_id_86973951_fk_content_a",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles_profile.id"],
            name="questioning_testprog_profile_id_68b83748_fk_profiles_",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["content_question.id"],
            name="questioning_testprog_question_id_9f53530a_fk_content_q",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["content_test.id"],
            name="questioning_testprogress_test_id_390b4f32_fk_content_test_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="questioning_testprogress_pkey"),
    )
    op.create_index(
        "questioning_testprogress_test_id_390b4f32",
        "questioning_testprogress",
        ["test_id"],
        unique=False,
    )
    op.create_index(
        "questioning_testprogress_question_id_9f53530a",
        "questioning_testprogress",
        ["question_id"],
        unique=False,
    )
    op.create_index(
        "questioning_testprogress_profile_id_68b83748",
        "questioning_testprogress",
        ["profile_id"],
        unique=False,
    )
    op.create_index(
        "questioning_testprogress_answer_id_86973951",
        "questioning_testprogress",
        ["answer_id"],
        unique=False,
    )
    op.create_table(
        "django_celery_beat_intervalschedule",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("every", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("period", sa.VARCHAR(length=24), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="django_celery_beat_intervalschedule_pkey"),
    )
    op.create_table(
        "auth_group_permissions",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("permission_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["auth_group.id"],
            name="auth_group_permissions_group_id_b120cbf9_fk_auth_group_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["auth_permission.id"],
            name="auth_group_permissio_permission_id_84c5c92e_fk_auth_perm",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="auth_group_permissions_pkey"),
        sa.UniqueConstraint(
            "group_id",
            "permission_id",
            name="auth_group_permissions_group_id_permission_id_0cd325b0_uniq",
        ),
    )
    op.create_index(
        "auth_group_permissions_permission_id_84c5c92e",
        "auth_group_permissions",
        ["permission_id"],
        unique=False,
    )
    op.create_index(
        "auth_group_permissions_group_id_b120cbf9",
        "auth_group_permissions",
        ["group_id"],
        unique=False,
    )
    op.create_table(
        "content_answer",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("text", sa.VARCHAR(length=250), autoincrement=False, nullable=True),
        sa.Column("question_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("value", sa.SMALLINT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["content_question.id"],
            name="content_answer_question_id_f9a786fb_fk_content_question_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="content_answer_pkey"),
    )
    op.create_index(
        "content_answer_question_id_f9a786fb", "content_answer", ["question_id"], unique=False
    )
    op.create_table(
        "django_celery_beat_clockedschedule",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "clocked_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="django_celery_beat_clockedschedule_pkey"),
    )
    op.create_table(
        "schedule_timeslot",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "date_start", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column("profile_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles_profile.id"],
            name="schedule_timeslot_profile_id_aef47b52_fk_profiles_profile_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="schedule_timeslot_pkey"),
    )
    op.create_index(
        "schedule_timeslot_profile_id_aef47b52", "schedule_timeslot", ["profile_id"], unique=False
    )
    op.create_table(
        "profiles_profile_groups",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("profile_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["auth_group.id"],
            name="profiles_profile_groups_group_id_76a76a80_fk_auth_group_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles_profile.id"],
            name="profiles_profile_gro_profile_id_5d49c9a3_fk_profiles_",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="profiles_profile_groups_pkey"),
        sa.UniqueConstraint(
            "profile_id",
            "group_id",
            name="profiles_profile_groups_profile_id_group_id_25b08c5a_uniq",
        ),
    )
    op.create_index(
        "profiles_profile_groups_profile_id_5d49c9a3",
        "profiles_profile_groups",
        ["profile_id"],
        unique=False,
    )
    op.create_index(
        "profiles_profile_groups_group_id_76a76a80",
        "profiles_profile_groups",
        ["group_id"],
        unique=False,
    )
    op.create_table(
        "django_migrations",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("app", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "applied", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="django_migrations_pkey"),
    )
    op.create_table(
        "django_admin_log",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "action_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column("object_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("object_repr", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("action_flag", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.Column("change_message", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("content_type_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.CheckConstraint("action_flag >= 0", name="django_admin_log_action_flag_check"),
        sa.ForeignKeyConstraint(
            ["content_type_id"],
            ["django_content_type.id"],
            name="django_admin_log_content_type_id_c4bce8eb_fk_django_co",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["profiles_profile.id"],
            name="django_admin_log_user_id_c564eba6_fk_profiles_profile_id",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="django_admin_log_pkey"),
    )
    op.create_index(
        "django_admin_log_user_id_c564eba6", "django_admin_log", ["user_id"], unique=False
    )
    op.create_index(
        "django_admin_log_content_type_id_c4bce8eb",
        "django_admin_log",
        ["content_type_id"],
        unique=False,
    )
    op.drop_table("meeting_feedbacks")
    # ### end Alembic commands ###
