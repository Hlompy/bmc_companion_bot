name: Deploy workflow

on:
  pull_request:
    branches:
      - develop
    # types: [closed]

env:
  REGISTRY: ghcr.io
  REP_OWNER: studio-yandex-practicum
  BOT_IMAGE_NAME: bmc_companion_bot
  ADMINPANEL_IMAGE_NAME: bmc_companion_adminpanel
  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  WORK_DIR: /BMC

defaults:
  run:
    working-directory: .

jobs:
  build_and_push_docker_image:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    environment:
      name: stage_deploy

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (bot container)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/bot/Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.BOT_IMAGE_NAME }}:stage,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.BOT_IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.BOT_IMAGE_NAME }}:${{ github.sha }}
      - name: Build and push (admin container)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/adminpanel/Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.ADMINPANEL_IMAGE_NAME }}:stage,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.ADMINPANEL_IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.ADMINPANEL_IMAGE_NAME }}:${{ github.sha }}
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_push_docker_image
    environment:
      name: stage_deploy
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Copy docker-compose and nginx files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.stage.yaml, docker/nginx/"
          target: ${{ env.DEPLOY_PATH }}

      - name: Create .env file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            mv docker-compose.stage.yaml docker-compose.yaml
            rm -f .env
            touch .env
            echo TZ=${{ secrets.TZ }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            echo BOT_TOKEN=${{ secrets.BOT_TOKEN }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
  start_application:
    name: Start application
    runs-on: ubuntu-latest
    environment:
      name: stage_deploy
    needs: deploy
    steps:
      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            docker image prune -f
            docker pull  ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.BOT_IMAGE_NAME }}:latest
            docker pull  ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.ADMINPANEL_IMAGE_NAME }}:latest

            docker-compose --file docker-compose.yaml stop
            docker-compose --file docker-compose.yaml rm bot
            docker-compose --file docker-compose.yaml rm adminpanel
            docker-compose --file docker-compose.yaml rm celery
            docker-compose --file docker-compose.yaml rm celery_beat
            docker-compose --file docker-compose.yaml up -d
            docker-compose exec -T adminpanel python manage.py migrate --noinput
